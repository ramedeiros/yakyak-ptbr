(function() {
  var EVENT_STATE, STATE, TIME_ALL, TIME_SOME, checkEventState, checkTimer, exp, info, later, merge, ref, ref1, tryparse, wrapAction,
    slice = [].slice;

  ref = require('../util'), tryparse = ref.tryparse, later = ref.later;

  STATE = {
    CONNECTING: 'connecting',
    CONNECTED: 'connected',
    CONNECT_FAILED: 'connect_failed'
  };

  EVENT_STATE = {
    IN_SYNC: 'in_sync',
    MISSING_SOME: 'missing_some',
    MISSING_ALL: 'missing_all'
  };

  TIME_SOME = 40 * 1000;

  TIME_ALL = 10 * 60 * 1000;

  merge = function() {
    var i, k, len, o, os, t, v;
    t = arguments[0], os = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = os.length; i < len; i++) {
      o = os[i];
      for (k in o) {
        v = o[k];
        if (v !== null && v !== (void 0)) {
          t[k] = v;
        }
      }
    }
    return t;
  };

  info = {
    connecting: 'Conectando…',
    connected: 'Conectado',
    connect_failed: 'Falha na conexão!',
    unknown: 'ERRO!'
  };

  module.exports = exp = {
    state: null,
    eventState: null,
    lastActive: (ref1 = tryparse(localStorage.lastActive)) != null ? ref1 : 0,
    wasConnected: false,
    setState: function(state) {
      if (this.state === state) {
        return;
      }
      this.state = state;
      if (this.wasConnected && state === STATE.CONNECTED) {
        later(function() {
          return action('syncrecentconversations');
        });
      }
      this.wasConnected = this.wasConnected || state === STATE.CONNECTED;
      return updated('connection');
    },
    setWindowOnline: function(wonline) {
      if (this.wonline === wonline) {
        return;
      }
      this.wonline = wonline;
      if (!this.wonline) {
        return this.setState(STATE.CONNECT_FAILED);
      }
    },
    infoText: function() {
      var ref2;
      return (ref2 = info[this.state]) != null ? ref2 : info.unknown;
    },
    setLastActive: function(active) {
      if (this.lastActive === active) {
        return;
      }
      return this.lastActive = localStorage.lastActive = active;
    },
    setEventState: function(state) {
      if (this.eventState === state) {
        return;
      }
      this.eventState = state;
      if (state === EVENT_STATE.IN_SYNC) {
        if (!this.lastActive) {
          this.setLastActive(Date.now());
        }
      } else if (state === EVENT_STATE.MISSING_SOME) {
        later(function() {
          return action('syncallnewevents', this.lastActive);
        });
      } else if (state === EVENT_STATE.MISSING_ALL) {
        later(function() {
          return action('syncrecentconversations');
        });
      }
      later(function() {
        return checkEventState();
      });
      return updated('connection');
    }
  };

  merge(exp, STATE);

  merge(exp, EVENT_STATE);

  checkTimer = null;

  checkEventState = function() {
    var elapsed;
    elapsed = Date.now() - exp.lastActive;
    if (checkTimer) {
      clearTimeout(checkTimer);
    }
    if (elapsed >= TIME_ALL) {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.MISSING_ALL);
      });
    } else if (elapsed >= TIME_SOME) {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.MISSING_SOME);
      });
    } else {
      wrapAction(function() {
        return exp.setEventState(EVENT_STATE.IN_SYNC);
      });
    }
    return checkTimer = setTimeout(checkEventState, 1000);
  };

  wrapAction = function(f) {
    handle('connwrap', function() {
      return f();
    });
    return action('connwrap');
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL21vZGVscy9jb25uZWN0aW9uLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTtBQUFBLE1BQUEsOEhBQUE7SUFBQTs7RUFBQSxNQUFvQixPQUFBLENBQVEsU0FBUixDQUFwQixFQUFDLGVBQUEsUUFBRCxFQUFXLFlBQUE7O0VBRVgsS0FBQSxHQUNJO0lBQUEsVUFBQSxFQUFnQixZQUFoQjtJQUNBLFNBQUEsRUFBZ0IsV0FEaEI7SUFFQSxjQUFBLEVBQWdCLGdCQUZoQjs7O0VBSUosV0FBQSxHQUNJO0lBQUEsT0FBQSxFQUFpQixTQUFqQjtJQUNBLFlBQUEsRUFBaUIsY0FEakI7SUFFQSxXQUFBLEVBQWlCLGFBRmpCOzs7RUFJSixTQUFBLEdBQVksRUFBQSxHQUFLOztFQUNqQixRQUFBLEdBQVksRUFBQSxHQUFLLEVBQUwsR0FBVTs7RUFFdEIsS0FBQSxHQUFVLFNBQUE7QUFBYyxRQUFBO0lBQWIsa0JBQUc7QUFBVSxTQUFBLG9DQUFBOztBQUFBLFdBQUEsTUFBQTs7WUFBMkIsQ0FBQSxLQUFVLElBQVYsSUFBQSxDQUFBLEtBQWdCO1VBQTNDLENBQUUsQ0FBQSxDQUFBLENBQUYsR0FBTzs7QUFBUDtBQUFBO1dBQW1FO0VBQWpGOztFQUVWLElBQUEsR0FDSTtJQUFBLFVBQUEsRUFBZ0IsYUFBaEI7SUFDQSxTQUFBLEVBQWdCLFdBRGhCO0lBRUEsY0FBQSxFQUFnQixlQUZoQjtJQUdBLE9BQUEsRUFBZ0IsU0FIaEI7OztFQUtKLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLEdBQUEsR0FDYjtJQUFBLEtBQUEsRUFBTyxJQUFQO0lBQ0EsVUFBQSxFQUFZLElBRFo7SUFFQSxVQUFBLDhEQUFnRCxDQUZoRDtJQUdBLFlBQUEsRUFBYyxLQUhkO0lBS0EsUUFBQSxFQUFVLFNBQUMsS0FBRDtNQUNOLElBQVUsSUFBQyxDQUFBLEtBQUQsS0FBVSxLQUFwQjtBQUFBLGVBQUE7O01BQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUztNQUNULElBQUcsSUFBQyxDQUFB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cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiXG57dHJ5cGFyc2UsIGxhdGVyfSA9IHJlcXVpcmUgJy4uL3V0aWwnXG5cblNUQVRFID1cbiAgICBDT05ORUNUSU5HOiAgICAgJ2Nvbm5lY3RpbmcnICAgICAjIGV4YWN0bHkgbWF0Y2ggY29ycmVzcG9uZGluZyBldmVudCBuYW1lXG4gICAgQ09OTkVDVEVEOiAgICAgICdjb25uZWN0ZWQnICAgICAgIyBleGFjdGx5IG1hdGNoIGNvcnJlc3BvbmRpbmcgZXZlbnQgbmFtZVxuICAgIENPTk5FQ1RfRkFJTEVEOiAnY29ubmVjdF9mYWlsZWQnICMgZXhhY3RseSBtYXRjaCBjb3JyZXNwb25kaW5nIGV2ZW50IG5hbWVcblxuRVZFTlRfU1RBVEUgPVxuICAgIElOX1NZTkM6ICAgICAgICAgJ2luX3N5bmMnICAgICAgICMgd2hlbiB3ZSBjZXJ0YWluIHdlIGhhdmUgY29ubmVjdGlvbi9ldmVudHNcbiAgICBNSVNTSU5HX1NPTUU6ICAgICdtaXNzaW5nX3NvbWUnICAjIHdoZW4gbW9yZSB0aGFuIDQwIHNlY3Mgd2l0aG91dCBhbnkgZXZlbnRcbiAgICBNSVNTSU5HX0FMTDogICAgICdtaXNzaW5nX2FsbCcgICAjIHdoZW4gbW9yZSB0aGFuIDEwIG1pbnV0ZXMgd2l0aG91dCBhbnkgZXZlbnRcblxuVElNRV9TT01FID0gNDAgKiAxMDAwICAgICAgIyA0MCBzZWNzXG5USU1FX0FMTCAgPSAxMCAqIDYwICogMTAwMCAjIDEwIG1pbnNcblxubWVyZ2UgICA9ICh0LCBvcy4uLikgLT4gdFtrXSA9IHYgZm9yIGssdiBvZiBvIHdoZW4gdiBub3QgaW4gW251bGwsIHVuZGVmaW5lZF0gZm9yIG8gaW4gb3M7IHRcblxuaW5mbyA9XG4gICAgY29ubmVjdGluZzogICAgICdDb25uZWN0aW5n4oCmJ1xuICAgIGNvbm5lY3RlZDogICAgICAnQ29ubmVjdGVkJ1xuICAgIGNvbm5lY3RfZmFpbGVkOiAnTm90IGNvbm5lY3RlZCdcbiAgICB1bmtub3duOiAgICAgICAgJ1Vua25vd24nXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwID1cbiAgICBzdGF0ZTogbnVsbCAgICAgICAjIGN1cnJlbnQgY29ubmVjdGlvbiBzdGF0ZVxuICAgIGV2ZW50U3RhdGU6IG51bGwgICMgY3VycmVudCBldmVudCBzdGF0ZVxuICAgIGxhc3RBY3RpdmU6IHRyeXBhcnNlKGxvY2FsU3RvcmFnZS5sYXN0QWN0aXZlKSA/IDAgIyBsYXN0IGFjdGl2aXR5IHRpbWVzdGFtcFxuICAgIHdhc0Nvbm5lY3RlZDogZmFsc2VcblxuICAgIHNldFN0YXRlOiAoc3RhdGUpIC0+XG4gICAgICAgIHJldHVybiBpZiBAc3RhdGUgPT0gc3RhdGVcbiAgICAgICAgQHN0YXRlID0gc3RhdGVcbiAgICAgICAgaWYgQHdhc0Nvbm5lY3RlZCBhbmQgc3RhdGUgPT0gU1RBVEUuQ09OTkVDVEVEXG4gICAgICAgICAgICBsYXRlciAtPiBhY3Rpb24gJ3N5bmNyZWNlbnRjb252ZXJzYXRpb25zJ1xuICAgICAgICBAd2FzQ29ubmVjdGVkID0gQHdhc0Nvbm5lY3RlZCBvciBzdGF0ZSA9PSBTVEFURS5DT05ORUNURURcbiAgICAgICAgdXBkYXRlZCAnY29ubmVjdGlvbidcblxuICAgIHNldFdpbmRvd09ubGluZTogKHdvbmxpbmUpIC0+XG4gICAgICAgIHJldHVybiBpZiBAd29ubGluZSA9PSB3b25saW5lXG4gICAgICAgIEB3b25saW5lID0gd29ubGluZVxuICAgICAgICB1bmxlc3MgQHdvbmxpbmVcbiAgICAgICAgICAgIEBzZXRTdGF0ZSBTVEFURS5DT05ORUNUX0ZBSUxFRFxuXG4gICAgaW5mb1RleHQ6IC0+IGluZm9bQHN0YXRlXSA/IGluZm8udW5rbm93blxuXG4gICAgc2V0TGFzdEFjdGl2ZTogKGFjdGl2ZSkgLT5cbiAgICAgICAgcmV0dXJuIGlmIEBsYXN0QWN0aXZlID09IGFjdGl2ZVxuICAgICAgICBAbGFzdEFjdGl2ZSA9IGxvY2FsU3RvcmFnZS5sYXN0QWN0aXZlID0gYWN0aXZlXG5cbiAgICBzZXRFdmVudFN0YXRlOiAoc3RhdGUpIC0+XG4gICAgICAgIHJldHVybiBpZiBAZXZlbnRTdGF0ZSA9PSBzdGF0ZVxuICAgICAgICBAZXZlbnRTdGF0ZSA9IHN0YXRlXG4gICAgICAgIGlmIHN0YXRlID09IEVWRU5UX1NUQVRFLklOX1NZTkNcbiAgICAgICAgICAgIEBzZXRMYXN0QWN0aXZlIERhdGUubm93KCkgdW5sZXNzIEBsYXN0QWN0aXZlXG4gICAgICAgIGVsc2UgaWYgc3RhdGUgPT0gRVZFTlRfU1RBVEUuTUlTU0lOR19TT01FXG4gICAgICAgICAgICAjIGlmIHdlIGhhdmUgYSBnYXAgb2YgbW9yZSB0aGFuIDQwIHNlY29uZHMgd2UgdHJ5IGdldHRpbmdcbiAgICAgICAgICAgICMgYW55IGV2ZW50cyB3ZSBtYXkgaGF2ZSBtaXNzZWQgZHVyaW5nIHRoYXQgZ2FwLiBub3RpY2VcbiAgICAgICAgICAgICMgdGhhdCB3ZSBnZXQgJ25vb3AnIGV2ZXJ5IDIwLTMwIHNlY29uZHMsIHNvIHRoZXJlIGlzIG5vXG4gICAgICAgICAgICAjIHJlYXNvbiBmb3IgYSBnYXAgb2YgNDAgc2Vjb25kcy5cbiAgICAgICAgICAgIGxhdGVyIC0+IGFjdGlvbiAnc3luY2FsbG5ld2V2ZW50cycsIEBsYXN0QWN0aXZlXG4gICAgICAgIGVsc2UgaWYgc3RhdGUgPT0gRVZFTlRfU1RBVEUuTUlTU0lOR19BTExcbiAgICAgICAgICAgICMgaWYgd2UgaGF2ZSBhIGdhcCBvZiBtb3JlIHRoYW4gMTAgbWludXRlcywgd2Ugd2lsbFxuICAgICAgICAgICAgIyByZWluaXRpYWxpemUgYWxsIGNvbnZzIHVzaW5nIHN5bmNyZWNlbnRjb252ZXJzYXRpb25zXG4gICAgICAgICAgICAjIChzb3J0IG9mIGxpa2UgY2xpZW50IHN0YXJ0dXApXG4gICAgICAgICAgICBsYXRlciAtPiBhY3Rpb24gJ3N5bmNyZWNlbnRjb252ZXJzYXRpb25zJ1xuICAgICAgICBsYXRlciAtPiBjaGVja0V2ZW50U3RhdGUoKVxuICAgICAgICB1cGRhdGVkICdjb25uZWN0aW9uJ1xuXG5tZXJnZSBleHAsIFNUQVRFXG5tZXJnZSBleHAsIEVWRU5UX1NUQVRFXG5cbmNoZWNrVGltZXIgPSBudWxsXG5jaGVja0V2ZW50U3RhdGUgPSAtPlxuICAgIGVsYXBzZWQgPSBEYXRlLm5vdygpIC0gZXhwLmxhc3RBY3RpdmVcbiAgICBjbGVhclRpbWVvdXQgY2hlY2tUaW1lciBpZiBjaGVja1RpbWVyXG4gICAgaWYgZWxhcHNlZCA+PSBUSU1FX0FMTFxuICAgICAgICB3cmFwQWN0aW9uIC0+IGV4cC5zZXRFdmVudFN0YXRlIEVWRU5UX1NUQVRFLk1JU1NJTkdfQUxMXG4gICAgZWxzZSBpZiBlbGFwc2VkID49IFRJTUVfU09NRVxuICAgICAgICB3cmFwQWN0aW9uIC0+IGV4cC5zZXRFdmVudFN0YXRlIEVWRU5UX1NUQVRFLk1JU1NJTkdfU09NRVxuICAgIGVsc2VcbiAgICAgICAgd3JhcEFjdGlvbiAtPiBleHAuc2V0RXZlbnRTdGF0ZSBFVkVOVF9TVEFURS5JTl9TWU5DXG4gICAgY2hlY2tUaW1lciA9IHNldFRpbWVvdXQgY2hlY2tFdmVudFN0YXRlLCAxMDAwXG5cbndyYXBBY3Rpb24gPSAoZikgLT5cbiAgICBoYW5kbGUgJ2Nvbm53cmFwJywgLT4gZigpXG4gICAgYWN0aW9uICdjb25ud3JhcCdcbiJdfQ==
