// Generated by CoffeeScript 1.9.3
(function() {
  var MessageBuilder, SegmentType;

  SegmentType = require('./schema').SegmentType;

  module.exports = MessageBuilder = (function() {
    function MessageBuilder() {
      this.segments = [];
      this.segsjson = [];
    }

    MessageBuilder.prototype.text = function(txt, bold, italic, strikethrough, underline, href) {
      var format, link, seg, segj;
      if (bold == null) {
        bold = false;
      }
      if (italic == null) {
        italic = false;
      }
      if (strikethrough == null) {
        strikethrough = false;
      }
      if (underline == null) {
        underline = false;
      }
      if (href == null) {
        href = null;
      }
      seg = [SegmentType.TEXT, txt];
      segj = {
        text: txt,
        type: "TEXT"
      };
      if (bold || italic || strikethrough || underline) {
        seg[2] = format = [];
        segj.formatting = {};
        format[0] = bold ? 1 : null;
        format[1] = italic ? 1 : null;
        format[2] = strikethrough ? 1 : null;
        format[3] = underline ? 1 : null;
        if (bold) {
          segj.formatting.bold = 1;
        }
        if (italic) {
          segj.formatting.italic = 1;
        }
        if (strikethrough) {
          segj.formatting.strikethrough = 1;
        }
        if (underline) {
          segj.formatting.underline = 1;
        }
      }
      if (href) {
        seg[0] = SegmentType.LINK;
        segj.type = "LINK";
        if (!seg[2]) {
          seg[2] = null;
        }
        seg[3] = link = [];
        link[0] = href;
        segj.link_data = {
          link_target: href
        };
      }
      this.segments.push(seg);
      this.segsjson.push(segj);
      return this;
    };

    MessageBuilder.prototype.bold = function(txt) {
      return this.text(txt, true);
    };

    MessageBuilder.prototype.italic = function(txt) {
      return this.text(txt, false, true);
    };

    MessageBuilder.prototype.strikethrough = function(txt) {
      return this.text(txt, false, false, true);
    };

    MessageBuilder.prototype.underline = function(txt) {
      return this.text(txt, false, false, false, true);
    };

    MessageBuilder.prototype.link = function(txt, href) {
      return this.text(txt, false, false, false, false, href);
    };

    MessageBuilder.prototype.linebreak = function() {
      var seg, segj;
      seg = [SegmentType.LINE_BREAK, '\n'];
      segj = {
        text: '\n',
        type: 'LINE_BREAK'
      };
      this.segments.push(seg);
      this.segsjson.push(segj);
      return this;
    };

    MessageBuilder.prototype.toSegments = function() {
      return this.segments;
    };

    MessageBuilder.prototype.toSegsjson = function() {
      return this.segsjson;
    };

    return MessageBuilder;

  })();

}).call(this);
