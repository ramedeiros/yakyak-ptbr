// Generated by CoffeeScript 1.9.3
(function() {
  var NetworkError, Q, find, fmterr, plug, req, request, tryparse, uniqfn, wait,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  request = require('request');

  Q = require('q');

  find = curry(function(o, fn) {
    var a, arr, j, len;
    arr = Array.isArray(o) ? o : values(o);
    for (j = 0, len = arr.length; j < len; j++) {
      a = arr[j];
      if (fn(a)) {
        return a;
      }
    }
    return null;
  });

  plug = function(rs, rj) {
    return function(err, val) {
      if (err) {
        return rj(err);
      } else {
        return rs(val);
      }
    };
  };

  NetworkError = (function(superClass) {
    extend(NetworkError, superClass);

    function NetworkError(code, message, body) {
      this.code = code;
      this.message = message;
      this.body = body;
      NetworkError.__super__.constructor.apply(this, arguments);
    }

    return NetworkError;

  })(Error);

  NetworkError.forRes = function(res) {
    return new NetworkError(res.statusCode, res.statusMessage, res.body);
  };

  req = function() {
    var as;
    as = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return Q.Promise(function(rs, rj) {
      return request.apply(null, slice.call(as).concat([plug(rs, rj)]));
    });
  };

  uniqfn = function(as, fn) {
    var fned;
    fned = map(as, fn);
    return as.filter(function(v, i) {
      return index(fned, fned[i]) === i;
    });
  };

  wait = function(time) {
    return Q.Promise(function(rs) {
      return setTimeout(rs, time);
    });
  };

  tryparse = function(str) {
    var err;
    try {
      return JSON.parse(str);
    } catch (_error) {
      err = _error;
      return null;
    }
  };

  fmterr = function(err) {
    var ref, ref1, ref2;
    return (ref = (ref1 = (ref2 = err.code) != null ? ref2 : err.errno) != null ? ref1 : err.message) != null ? ref : String(err);
  };

  module.exports = {
    req: req,
    plug: plug,
    find: find,
    uniqfn: uniqfn,
    wait: wait,
    tryparse: tryparse,
    NetworkError: NetworkError,
    fmterr: fmterr
  };

}).call(this);
