// Generated by CoffeeScript 1.9.3
(function() {
  var PushDataParser, Q, findNextLf, log;

  Q = require('q');

  log = require('bog');

  findNextLf = function(buf, start) {
    var i, len;
    i = start;
    len = buf.length;
    while (i < len) {
      if (buf[i] === 10) {
        return i;
      }
      i++;
    }
    return -1;
  };

  module.exports = PushDataParser = (function() {
    function PushDataParser(data) {
      this.lines = [];
      this.leftover = null;
      if (data) {
        this.parse(data);
      }
    }

    PushDataParser.prototype.parse = function(newdata) {
      var available, data, end, i, len, line, n, start;
      data = this.leftover ? Buffer.concat([this.leftover, newdata]) : newdata;
      this.leftover = null;
      i = 0;
      while ((n = findNextLf(data, i)) >= 0) {
        len = JSON.parse(data.slice(i, n).toString());
        start = n + 1;
        end = n + 1 + len;
        if (!(end <= data.length)) {
          break;
        }
        line = JSON.parse(data.slice(start, end).toString());
        this.lines.push(line);
        i = end;
      }
      if (i < data.length) {
        this.leftover = data.slice(i);
      }
      available = this.available();
      if (available && this.def) {
        this.def.resolve(this.lines);
        this.def = null;
        this.lines = [];
      }
      return available;
    };

    PushDataParser.prototype.available = function() {
      return this.lines.length;
    };

    PushDataParser.prototype.pop = function() {
      return this.lines.pop();
    };

    PushDataParser.prototype.allLines = function() {
      var def, ref;
      def = (ref = this.def) != null ? ref : Q.defer();
      if (this.lines.length) {
        def.resolve(this.lines);
        this.def = null;
        this.lines = [];
      } else {
        this.def = def;
      }
      return def.promise;
    };

    PushDataParser.prototype.reset = function(err) {
      log.debug('PushDataParser reset');
      if (this.def) {
        if (err) {
          this.def.reject(err);
        } else {
          this.def.resolve([]);
        }
        this.def = null;
      }
      this.lines = [];
      return this.leftover = null;
    };

    return PushDataParser;

  })();

}).call(this);
