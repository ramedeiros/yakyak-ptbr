// Generated by CoffeeScript 1.9.3
(function() {
  var Auth, AuthError, Cookie, MERGE_SESSION, MERGE_SESSION_MAIL, NetworkError, OAUTH2_CLIENT_ID, OAUTH2_CLIENT_SECRET, OAUTH2_LOGIN_URL, OAUTH2_PARAMS, OAUTH2_QUERY, OAUTH2_SCOPE, OAUTH2_TOKEN_REQUEST_URL, Q, UBERAUTH, clone, cookieStrToJar, fs, k, log, plug, ref, req, request, setCookie, v,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Cookie = require('tough-cookie').Cookie;

  request = require('request');

  log = require('bog');

  Q = require('q');

  fs = require('fs');

  ref = require('./util'), plug = ref.plug, req = ref.req, NetworkError = ref.NetworkError;

  OAUTH2_CLIENT_ID = '936475272427.apps.googleusercontent.com';

  OAUTH2_CLIENT_SECRET = 'KWsJlkaMn1jGLxQpWxMnOox-';

  OAUTH2_SCOPE = 'https://www.google.com/accounts/OAuthLogin';

  OAUTH2_PARAMS = {
    client_id: OAUTH2_CLIENT_ID,
    scope: OAUTH2_SCOPE,
    redirect_uri: 'urn:ietf:wg:oauth:2.0:oob',
    response_type: 'code'
  };

  OAUTH2_QUERY = ((function() {
    var results;
    results = [];
    for (k in OAUTH2_PARAMS) {
      v = OAUTH2_PARAMS[k];
      results.push("&" + k + "=" + (encodeURIComponent(v)));
    }
    return results;
  })()).join('');

  OAUTH2_LOGIN_URL = "https://accounts.google.com/o/oauth2/auth?" + OAUTH2_QUERY;

  OAUTH2_TOKEN_REQUEST_URL = 'https://accounts.google.com/o/oauth2/token';

  UBERAUTH = 'https://accounts.google.com/accounts/OAuthLogin?source=hangups&issueuberauth=1';

  MERGE_SESSION = 'https://accounts.google.com/MergeSession';

  MERGE_SESSION_MAIL = "https://accounts.google.com/MergeSession?service=mail" + "&continue=http://www.google.com&uberauth=";

  AuthError = (function(superClass) {
    extend(AuthError, superClass);

    function AuthError() {
      AuthError.__super__.constructor.apply(this, arguments);
    }

    return AuthError;

  })(Error);

  setCookie = function(jar) {
    return function(cookie) {
      return Q.Promise(function(rs, rj) {
        return jar.setCookie(cookie, OAUTH2_LOGIN_URL, plug(rs, rj));
      });
    };
  };

  cookieStrToJar = function(jar, str) {
    return setCookie(jar)(Cookie.parse(str));
  };

  clone = function(o) {
    return JSON.parse(JSON.stringify(o));
  };

  module.exports = Auth = (function() {
    function Auth(jar1, jarstore1, creds1, opts1) {
      this.jar = jar1;
      this.jarstore = jarstore1;
      this.creds = creds1;
      this.opts = opts1;
      this.getSessionCookies = bind(this.getSessionCookies, this);
      this.requestAuthCode = bind(this.requestAuthCode, this);
      this.authWithRefreshToken = bind(this.authWithRefreshToken, this);
      this.saveRefreshToken = bind(this.saveRefreshToken, this);
      this.loadRefreshToken = bind(this.loadRefreshToken, this);
      this.oauthLogin = bind(this.oauthLogin, this);
      this.providedCookies = bind(this.providedCookies, this);
      this.getAuth = bind(this.getAuth, this);
    }

    Auth.prototype.getAuth = function() {
      log.debug('getting auth...');
      return Q().then((function(_this) {
        return function() {
          return Q.Promise(function(rs, rj) {
            return _this.jar.getCookies(OAUTH2_LOGIN_URL, plug(rs, rj));
          });
        };
      })(this)).then((function(_this) {
        return function(cookies) {
          if (cookies.length) {
            log.debug('using cached cookies');
            return Q();
          } else {
            log.debug('proceeding to login');
            return _this.login();
          }
        };
      })(this)).then(function() {
        return log.debug('getAuth done');
      }).fail(function(err) {
        log.error('getAuth failed', err);
        return Q.reject(err);
      });
    };

    Auth.prototype.login = function() {
      return Q().then((function(_this) {
        return function() {
          return _this.creds();
        };
      })(this)).then((function(_this) {
        return function(creds) {
          if (creds.auth) {
            return _this.oauthLogin(creds);
          } else if (creds.cookies) {
            return _this.providedCookies(creds);
          } else {
            throw new Error("No acceptable creds provided");
          }
        };
      })(this));
    };

    Auth.prototype.providedCookies = function(arg) {
      var cookie, cookies, proms;
      cookies = arg.cookies;
      proms = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = cookies.length; i < len; i++) {
          cookie = cookies[i];
          results.push(cookieStrToJar(this.jar, cookie));
        }
        return results;
      }).call(this);
      return Q.all(proms);
    };

    Auth.prototype.oauthLogin = function(arg) {
      var auth;
      auth = arg.auth;
      return Q().then((function(_this) {
        return function() {
          return _this.loadRefreshToken().then(function(rtoken) {
            if (rtoken) {
              return _this.authWithRefreshToken(rtoken);
            }
          });
        };
      })(this)).then((function(_this) {
        return function(atoken) {
          if (atoken) {
            return atoken;
          } else {
            return _this.requestAuthCode(auth);
          }
        };
      })(this)).then((function(_this) {
        return function(atoken) {
          return _this.getSessionCookies(atoken);
        };
      })(this));
    };

    Auth.prototype.loadRefreshToken = function() {
      var path, tokenPersistence;
      path = this.opts.rtokenpath;
      tokenPersistence = this.opts.tokenPersistence;
      return Q().then(function() {
        return Q.Promise(function(rs, rj) {
          if (tokenPersistence) {
            return tokenPersistence.load().then(rs, rj);
          } else {
            return fs.readFile(path, 'utf-8', plug(rs, rj));
          }
        });
      }).fail(function(err) {
        if (err.code === 'ENOENT') {
          return null;
        }
        return Q.reject(err);
      });
    };

    Auth.prototype.saveRefreshToken = function(rtoken) {
      var path, tokenPersistence;
      path = this.opts.rtokenpath;
      tokenPersistence = this.opts.tokenPersistence;
      return Q().then(function() {
        return Q.Promise(function(rs, rj) {
          if (tokenPersistence) {
            return tokenPersistence.save(rtoken).then(rs, rj);
          } else {
            return fs.writeFile(path, rtoken, plug(rs, rj));
          }
        });
      });
    };

    Auth.prototype.authWithRefreshToken = function(rtoken) {
      log.debug('auth with refresh token');
      return Q().then(function() {
        var opts;
        opts = {
          method: 'POST',
          uri: OAUTH2_TOKEN_REQUEST_URL,
          form: {
            client_id: OAUTH2_CLIENT_ID,
            client_secret: OAUTH2_CLIENT_SECRET,
            grant_type: 'refresh_token',
            refresh_token: rtoken
          }
        };
        return req(opts);
      }).then(function(res) {
        var body;
        if (res.statusCode === 200) {
          log.debug('refresh token success');
          body = JSON.parse(res.body);
          return body.access_token;
        } else {
          return Q.reject(NetworkError.forRes(res));
        }
      });
    };

    Auth.prototype.requestAuthCode = function(auth) {
      log.debug('request auth code from user');
      return Q().then(function() {
        return auth();
      }).then(function(code) {
        var opts;
        log.debug('requesting refresh token');
        opts = {
          method: 'POST',
          uri: OAUTH2_TOKEN_REQUEST_URL,
          form: {
            client_id: OAUTH2_CLIENT_ID,
            client_secret: OAUTH2_CLIENT_SECRET,
            code: code,
            grant_type: 'authorization_code',
            redirect_uri: 'urn:ietf:wg:oauth:2.0:oob'
          }
        };
        return req(opts);
      }).then((function(_this) {
        return function(res) {
          var body;
          if (res.statusCode === 200) {
            log.debug('auth with code success');
            body = JSON.parse(res.body);
            return _this.saveRefreshToken(body.refresh_token).then(function() {
              return body.access_token;
            });
          } else {

          }
        };
      })(this));
    };

    Auth.prototype.getSessionCookies = function(atoken) {
      var headers, jarstore, opts, uberauth;
      log.debug('attempt to get session cookies', atoken);
      uberauth = null;
      headers = {
        Authorization: "Bearer " + atoken
      };
      jarstore = this.jarstore;
      opts = this.opts;
      return Q().then(function() {
        log.debug('requesting uberauth');
        return req({
          method: 'GET',
          uri: UBERAUTH,
          jar: request.jar(jarstore),
          proxy: opts.proxy,
          headers: headers
        });
      }).then(function(res) {
        if (res.statusCode !== 200) {
          return Q.reject(NetworkError.forRes(res));
        }
        log.debug('got uberauth');
        return uberauth = res.body;
      }).then(function() {
        log.debug('request merge session 1/2');
        return req({
          method: 'GET',
          uri: MERGE_SESSION,
          jar: request.jar(jarstore),
          proxy: opts.proxy
        });
      }).then(function(res) {
        if (res.statusCode !== 200) {
          return Q.reject(NetworkError.forRes(res));
        }
        log.debug('request merge session 2/2');
        return req({
          method: 'GET',
          uri: MERGE_SESSION_MAIL + uberauth,
          jar: request.jar(jarstore),
          proxy: opts.proxy,
          header: headers
        });
      }).then(function(res) {
        if (res.statusCode !== 200) {
          return Q.reject(NetworkError.forRes(res));
        }
        return log.debug('got session cookies');
      });
    };

    Auth.prototype.authStdin = function() {
      process.stdout.write("\nTo log in, open the following link in a browser and paste the provided authorization code below:\n\n");
      process.stdout.write(OAUTH2_LOGIN_URL);
      return Q().then(function() {
        process.stdout.write("\n\nAuthorization Token: ");
        process.stdin.setEncoding('utf8');
        return Q.Promise(function(rs) {
          var fn;
          return process.stdin.on('readable', fn = function() {
            var chunk;
            chunk = process.stdin.read();
            if (chunk !== null) {
              rs(chunk);
              return process.stdin.removeListener('on', fn);
            }
          });
        });
      });
    };

    return Auth;

  })();

  Auth.OAUTH2_LOGIN_URL = OAUTH2_LOGIN_URL;

}).call(this);
