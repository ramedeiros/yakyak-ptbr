{
  "_args": [
    [
      "bog@^1.0.0",
      "/Users/martin/dev/yakyak/app/node_modules/hangupsjs"
    ]
  ],
  "_from": "bog@>=1.0.0 <2.0.0",
  "_id": "bog@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/bog",
  "_npmUser": {
    "email": "martin@algesten.se",
    "name": "algesten"
  },
  "_npmVersion": "1.3.17",
  "_phantomChildren": {},
  "_requested": {
    "name": "bog",
    "raw": "bog@^1.0.0",
    "rawSpec": "^1.0.0",
    "scope": null,
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/hangupsjs"
  ],
  "_resolved": "https://registry.npmjs.org/bog/-/bog-1.0.0.tgz",
  "_shasum": "41e8faa3f8bd8ed12608a103411df549fdc7ab41",
  "_shrinkwrap": null,
  "_spec": "bog@^1.0.0",
  "_where": "/Users/martin/dev/yakyak/app/node_modules/hangupsjs",
  "author": {
    "email": "martin@algesten.se",
    "name": "Martin Algesten"
  },
  "bugs": {
    "url": "https://github.com/ttab/bog/issues"
  },
  "dependencies": {},
  "description": "Thinnest possible logging",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "41e8faa3f8bd8ed12608a103411df549fdc7ab41",
    "tarball": "http://registry.npmjs.org/bog/-/bog-1.0.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/ttab/bog",
  "keywords": [
    "log",
    "logging",
    "ligh",
    "lightweight"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/ttab/bog/master/LICENSE"
    }
  ],
  "main": "./bog.js",
  "maintainers": [
    {
      "email": "martin@algesten.se",
      "name": "algesten"
    }
  ],
  "name": "bog",
  "optionalDependencies": {},
  "readme": "Simplest Possible Logging\n=========================\n\n`console.log` and `console.error` is really enough and the world has\ntoo many log frameworks. This library should not be used, but if you\ndecide to anyway, you get the following:\n\n* Timestamped log lines in local time zone.\n* Log levels: `DEBUG`, `INFO`, `WARN`, `ERROR`\n* Possible to redirect.\n* Reasonable defaults.\n* Singleton\n\n## Defaults\n\nThe default log level is `INFO`. Debug messages are not shown. Info,\nwarnings and errors are.\n\nBy default `DEBUG` and `INFO` go to `console.log` (and thus `stdout`),\nwhile `WARN` and `ERROR` go to `console.error` (thus `stderr`).\n\n*** 1.0.0 - changed to local time zone. Earlier versions times were always in Zulu.\n\nThe default time format is\n[ISO8601](http://en.wikipedia.org/wiki/ISO_8601) in the local time zone.\n\n## Install\n```\nnpm install bog\n```\n\n## Example\n\n```javascript\nvar log = require('bog');\n\nlog.info('Something wonderful has happened Your AMIGA is alive !!!');\n```\n\nWould produce:\n\n```\n2013-06-13 19:05:35.482 INFO Something wonderful has happened Your AMIGA is alive !!!\n```\n\n## API\n\n### log.debug(args...)\n\nSame as `log.info`.\n\n### log.info(args...)\n\nOutputs logging at the `INFO` level. `args` is one or many arguments\nwhich is passed to the output function.\n\n#### Example\n\n```javascript\nlog.info('and, even', 'better...');\n```\n\nOutputs\n\n```\n2013-06-13 19:05:35.482 INFO and even better...\n```\n\nN.b. The above is conceptually the same as\n\n```javascript\nconsole.log((new Date()).toISOString(), 'INFO', 'and, even', 'better...');\n```\n\n### log.warn(args...)\n\nSame as `log.info`, but to `stderr`.\n\n### log.error(args...)\n\nSame as `log.info`, but to `stderr`.\n\n### log.level(level)\n\nSets the lowest reported log level, for example `warn` would enable\n`warn` and `error`, and disable `debug` and `info`.\n\n#### Example:\n\n```javascript\nlog.level('warn');\n```\n\n### log.redirect(out, err)\n\n`out` is the output *function* for `DEBUG` and `INFO` and `err` is the\noutput *function* for `WARN` and `ERROR`. `null` is appropriate to\nturn off output.\n\n#### Example:\n\n```javascript\nlog.redirect(null, null); // silences all logging\n...\nlog.redirect(console.log, console.error); // reinstates defaults\n```\n\n### log.config()\n\nSpills the beans of the internal config. Can be used to alter the formatting.\n\n#### Example\n\n```javascript\nlog.config().format = function(level, args) {\n    if (level === 'info') {\n        args.unshift('Prepended');\n        args.push('Appended');\n    }\n    return args;\n};\n```\n\n### Enable ISO8601 time designator 'T' and timezone\n\n*** Since 1.0.0\n\nIt's possible to turn on the time designator and timezone.\n\n```javascript\nlog.config().includeTimeDesignator = true;\nlog.config().includeTimeZone = true;\n\nlog.info('Something wonderful has happened Your AMIGA is alive !!!');\n```\n\nIf machine timezone is India this would produce:\n\n```\n2013-06-13T19:05:35.482+0530 INFO Something wonderful has happened Your AMIGA is alive !!!\n```\n\nNotice that zulu (GMT) time is denoted by a 'Z'.\n\n## License\n\nMIT License (MIT).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/ttab/bog.git"
  },
  "version": "1.0.0"
}
